rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function teamMembership(teamId) {
      return isSignedIn() && exists(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid));
    }

    function hasTeamRole(teamId, roles) {
      return teamMembership(teamId) && get(/databases/$(database)/documents/teams/$(teamId)/members/$(request.auth.uid)).data.role in roles;
    }

    function timerCollaborator(timerData) {
      return isSignedIn() && timerData.collaborators != null && timerData.collaborators[request.auth.uid] != null;
    }

    function timerEditor(timerData) {
      return timerCollaborator(timerData) && (
        timerData.collaborators[request.auth.uid] == 'editor' ||
        timerData.collaborators[request.auth.uid] == 'owner' ||
        timerData.collaborators[request.auth.uid] == 'admin'
      );
    }

    function authEmailLower() {
      return request.auth != null && request.auth.token.email != null ? lower(request.auth.token.email) : null;
    }

    match /teams/{teamId} {
      allow create: if isSignedIn();
      allow read: if isSignedIn() && teamMembership(teamId);
      allow update, delete: if isSignedIn() && hasTeamRole(teamId, ['owner']);

      match /members/{memberId} {
        allow read: if isSignedIn() && teamMembership(teamId);
        allow create, update: if isSignedIn() && hasTeamRole(teamId, ['admin', 'owner']);
        allow delete: if isSignedIn() && (hasTeamRole(teamId, ['owner']) || request.auth.uid == memberId);
      }

      match /invitations/{invitationId} {
        allow read: if isSignedIn() && hasTeamRole(teamId, ['admin', 'owner']);
        allow create, update, delete: if isSignedIn() && hasTeamRole(teamId, ['admin', 'owner']);
      }

      match /timerTemplates/{templateId} {
        allow read: if isSignedIn() && teamMembership(teamId);
        allow create, update, delete: if isSignedIn() && hasTeamRole(teamId, ['admin', 'owner']);
      }

      match /schedules/{scheduleId} {
        allow read: if isSignedIn() && teamMembership(teamId);
        allow create, update, delete: if isSignedIn() && hasTeamRole(teamId, ['admin', 'owner']);
      }

      match /metrics/{metricId} {
        allow read: if isSignedIn() && hasTeamRole(teamId, ['admin', 'owner']);
        allow write: if false;
      }

      match /sharedTimers/{sharedTimerId} {
        allow read: if isSignedIn() && teamMembership(teamId);
        allow create, update, delete: if isSignedIn() && hasTeamRole(teamId, ['admin', 'owner']);
      }

      match /ssoProviders/{providerId} {
        allow read: if isSignedIn() && hasTeamRole(teamId, ['admin', 'owner']);
        allow create, update, delete: if isSignedIn() && hasTeamRole(teamId, ['owner']);
      }

      match /usageRecords/{usageId} {
        allow read: if isSignedIn() && hasTeamRole(teamId, ['admin', 'owner']);
        allow write: if false;
      }
    }

    match /timers/{timerId} {
      allow read: if isSignedIn() && (
        !resource.data.team ||
        teamMembership(resource.data.team) ||
        timerCollaborator(resource.data)
      );
      allow create: if isSignedIn() && (
        (!request.resource.data.team || hasTeamRole(request.resource.data.team, ['member', 'admin', 'owner'])) ||
        timerCollaborator(request.resource.data)
      );
      allow update, delete: if isSignedIn() && (
        (!resource.data.team && request.auth.uid == resource.data.agentId) ||
        (resource.data.team != null && hasTeamRole(resource.data.team, ['admin', 'owner'])) ||
        timerEditor(resource.data)
      );
    }

    match /timer_expirations/{timerId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }

    match /timer_logs/{logId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }

    match /team_broadcasts/{broadcastId} {
      allow read: if isSignedIn() && teamMembership(resource.data.team);
      allow write: if isSignedIn() && hasTeamRole(resource.data.team, ['admin', 'owner']);
    }

    match /team_invitations/{token} {
      allow get: if isSignedIn() && resource.data.email == authEmailLower();
      allow update: if false;
      allow delete: if false;
      allow list: if false;
      allow create: if false;
    }
  }
}